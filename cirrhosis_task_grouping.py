# -*- coding: utf-8 -*-
"""Cirrhosis_task_grouping.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cTOcAxINRYYPC58MBiIooGIwOrO3j00Q
"""

import torch

import torch.nn as nn
import pandas as pd



patient = pd.read_excel('/content/Patient  details.xlsx', sheet_name = 2,header=1)
patient.isnull().sum()

patient.shape

patient1 = patient[['ID (Tumor samples)','Liver cirrhosis degree']]

patient1

for i in patient1['Liver cirrhosis degree'].unique():
  print(i, (patient1['Liver cirrhosis degree']==i).sum())
mapping = {'medium/high':'high','medium':'high','high':'high','low':'low','low/medium':'low','No':'low'}

patient1

j = []
for i in patient1['Liver cirrhosis degree']:
  j.append(mapping[i])

jannat = patient1

len(j)

pat2= pd.DataFrame(data = jannat)

type(pat2)

pat2['y'] = j

pat2

high_cirrhossis = pat2[pat2['y']=='high']    #(jpat2[pat2['y']=='high'])
high_cirrhossis

high_cirrhossis= pat2[pat2['y']=='high']
low_cirrhossis = pat2[pat2['y']=='low']

low_cirrhossis







import zipfile
import pandas as pd

with zipfile.ZipFile("/content/Proteins.zip") as z:
    with z.open("Proteins.xlsx") as f:  # file inside zip
        jd = pd.read_excel(f, header=1, sheet_name=1)

jd

kgf = jd.describe()
kgf

import matplotlib.pyplot as plt

q = jd.isnull().sum()[:160]
plt.figure(figsize = (30,6))
plt.plot(q,'b.')
plt.xticks(x=  jd.columns)
plt.show()

q.mean()

q

a = []
s = []
for i in low_cirrhossis['ID (Tumor samples)']:
  if i in jd.columns:
    a.append(i)
for i in high_cirrhossis['ID (Tumor samples)']:
  if i in jd.columns:
    s.append(i)
len(s)
myprotein = jd['Gene symbol']

gy = jd[a]


gg = jd[s]

gy.insert(0,'anirudh', myprotein)
gg.insert(0,'anirudh',myprotein)

low_df = gy
more_df = gg
more_df

high_t = more_df.T
high_t

low_t= low_df.T
low_t

tx = high_t
tx.columns = tx.iloc[0,:]
tx = tx.drop('anirudh',axis = 0)

tx

ty = low_t
ty.columns = ty.iloc[0,:]
ty = ty.drop('anirudh',axis = 0)
ty.columns
ty

tx

shrubs = abs(((tx.isnull().sum()/47)-1))
plants = abs(((ty.isnull().sum()/105)-1))
dd = (shrubs -plants).sort_values(ascending = False)[:30]
dd

dd

tapsee = plants - shrubs

"""For a patient the protiens that are present in more number of high cirhossis patients and lower numbers for lower cirhossis patients (num of patients in high vs low cirhossis as criteria) are in descending order
 'DLGAP4',
 'TRIM14',
 'SLC16A3',
 'CREB3L3',
 'ATP6AP1',
 'SULT1C2',
 'EIF1AY',
 'IMPDH1',
 'SNCG',
 'P4HA2',
 'TP53BP1',
 'TRIR',
 'POM121C',
 'PAM16',
 'PPP1R13L',
 'SENP3',
 'CLCN7',
 'SPP1',
 'SMARCA1',
 'ARPIN',
 'SMG9',
 'NOA1',
"""

low_t= low_df.T



tx = high_t
tx.columns = tx.iloc[0,:]
tx = tx.drop('anirudh',axis = 0)

ty = low_t
ty.columns = ty.iloc[0,:]
ty = ty.drop('anirudh',axis = 0)
ty.columns

ty.sum()/105
from sklearn.preprocessing import StandardScaler, MinMaxScaler
sc = StandardScaler()
sc3 = MinMaxScaler()

ty = ty.astype(float)

ty = ty.fillna(0)

mm = MinMaxScaler()
mm

ty.shape, tx.shape




ty.mean()

from scipy import stats

ty= (ty- ty.min()) / (ty.max() - ty.min())
tx = tx.astype(float)
tx = ((tx - tx.min()))/(tx.max()- tx.min())
tx = tx.fillna(0)

a = tx.std()
b = ty.std()

"""#For an average patient proteins that are relatively in higher quantity for higher cirhossis as far as average protein quant per patient as criteria are in descending orde 'RAB3GAP2', 'FUBP1', 'SCARB2', 'SORBS3', 'DNPEP', 'XE', 'HDGF','TM9SF2', 'DYNC1H1', 'PSMD2', 'LSS', 'MAPK1', 'SEPTIN6', 'LAMP1' 'SP29', 'TBC1D17', 'RPS10', 'AHSA1', 'VDAC1', 'ADSL', 'DYNLRB1','DCTN1', 'CORO1B', 'SDF2L1', 'NPLOC4'

"""

#pd.DataFrame(ty.mean(), tx.mean())
nb500 = list(ty.mean())
nb600 = list(tx.mean())
nb501 = list(ty.mean().index)
nb588 = list(ty.std())
nb676 = list(tx.std())

fb = pd.DataFrame({"high:cmeans": nb500, "low:cmeans":nb600,"protein_list":nb501, "low:cstd":nb588,"high:cstd":nb676})

high = []
high











fb

#for i in range(len(monica["protein_list"])):
 # international_love = ((monica['high:cmeans']- monica['low:cmenas']))/()
for i in range(0,len(fb["protein_list"])):
    il = ((fb["high:cmeans"]))
fb['diff_means'] = fb['high:cmeans'] - fb['low:cmeans']

fb["p-values"] = fb['diff_means']/pow(((fb['low:cstd'] * fb['low:cstd'])/105 ) + ((fb['high:cstd']* fb['high:cstd'])/48) ,0.5)



fb["degreesoffreedm"]=150

import numpy as np
from math import log2
aa = list(fb["high:cmeans"])
bb = list(fb["low:cmeans"])
a = [log2(x) for x in aa]

p = [log2(x) if x>0 else 0.01 for x in bb]
p
fb["d"] = a
fb["h"] = p
fb["logfoldchange"] = fb["d"] - fb["h"]
import matplotlib.pyplot as plt
fb['neg_log10_pval'] = -np.log10(fb['p-values'])

fb= fb.fillna(0)

fb

#fb
"""import matplotlib.pyplot as plt
import numpy as np

# Calculate -log10(p-value)
fb['neg_log10_pval'] = -np.log10(fb['p-values'])

# Plot base volcano
plt.figure(figsize=(10, 6))
plt.scatter(fb['logfoldchange'], fb['neg_log10_pval'], color='grey', alpha=0.7)


fc_thresh = 1
pval_thresh = 0.05

up = fb[(fb['logfoldchange'] > fc_thresh) & (fb['p-values'] < pval_thresh)]
down = fb[(fb['logfoldchange'] < -fc_thresh) & (fb['p-values'] < pval_thresh)]

plt.scatter(up['logfoldchange'], up['neg_log10_pval'], color='red', label='Upregulated')
plt.scatter(down['logfoldchange'], down['neg_log10_pval'], color='blue', label='Downregulated')

# Add threshold lines
plt.axhline(-np.log10(pval_thresh), color='black', linestyle='--')
plt.axvline(fc_thresh, color='black', linestyle='--')
plt.axvline(-fc_thresh, color='black', linestyle='--')

#  Label top N significant proteins
top_proteins = adithya.nsmallest(10,'p-values')
for _, row in top_proteins.iterrows():
    plt.text(row['logfoldchange'], row['neg_log10_pval'], row['protein_list'], fontsize=8)

plt.xlabel('log2(Fold Change)')
plt.ylabel('-log10(p-value)')
plt.title('Volcano Plot of Proteins')
plt.legend()
plt.tight_layout()
plt.show()"""

hg = fb[fb['p-values']<0.05]
different_proteins = hg['protein_list']
different_proteins
hg1= hg[hg['diff_means']>0]
hg2 = hg[hg['diff_means']<=0]
dddddd = hg2['protein_list']
dddd = hg1['protein_list']
dddddd

hg['protein_list']

from scipy import stats
t_stat, p_value = stats.ttest_ind(fb['high:cmeans'], fb['low:cmeans'])
print(p_value)

fb

list2 = []

for i in tx.columns:
  t_test, pval = stats.ttest_ind(tx[i], ty[i])
  list2.append(pval)
type(list2[0])

katri= []
for i in list2:

  katri.append(np.max(i))

fb["screwed"] = katri

#List of proteins that are statistically different in both the groups
an_fav = fb[fb["screwed"]<0.05]
dd = an_fav[["protein_list","screwed"]]
dd[:400]
dd

type(list2[0])

fb[['logfoldchange']].sort_values('logfoldchange',ascending = False)[:300]



#index = [1,2]
#adithya.iloc[index]



imdy = []

duminy = []

fb["valus"] = list2
list2[72] = 1
for i in fb["valus"]:
  imdy.append(np.mean(i))







fb["pup"] = imdy
actual_proteins = fb[fb["pup"]<0.049].sort_values(by = "pup", ascending = True)["protein_list"]
actual_proteins9  = actual_proteins[:800]
actual_proteins[:10]

proteinsinlc = fb.sort_values(by = "logfoldchange", ascending = True)["protein_list"][:400]
proteinsinhc = fb.sort_values(by = "logfoldchange", ascending = False)["protein_list"][:400]

proteinsinhc





#the most signicant proteins in high cirrhossis groups compared to the latter ones
s = fb.sort_values('logfoldchange',ascending=False)['logfoldchange'][:10]
Y= fb.sort_values('logfoldchange', ascending = False)['protein_list'][:10]
plt.figure(figsize = (11,7))
plt.title("Most significant proteins in high cirhossis as compared with low cirhossis", size = 20)
plt.xlabel("Name of the protein", size = 25)
plt.ylabel("The log fold change value", size = 20)
plt.bar(Y,s, width = 0.8,label = "The log fold vaalue" )
plt.legend()
plt.show()

ia = fb.sort_values(by = "logfoldchange", ascending = True)["logfoldchange"][:11]
ua = fb.sort_values(by = "logfoldchange",ascending = True)["protein_list"][:11]
plt.bar(ua,ia,label = "The Log Fold Change Value")
plt.ylabel("The value of the log fold change")
plt.xlabel("The type of protein")
plt.title("The proteins higher in low cirrhosis")
plt.legend(loc = "best")
plt.xticks(ua, rotation = 54)
plt.show()

#Proteins that are most significant interms of difference in low vs high groups
#cirrhosis'
e = fb.sort_values(by = "pup", ascending = True)["pup"][:10]
him = fb.sort_values(by = "pup", ascending = True)["protein_list"][:10]
plt.bar(him, e, label = " val of p statistic")
plt.xticks(him, rotation = 54)
plt.xlabel("The name of the protein", size = 22)
plt.ylabel("The change (p val)", size = 22)
plt.title("The p value of the proteins and corresponding ", size = 26)
plt.legend(loc = "best")
plt.show()





plt.hist(fb["screwed"], bins = 40, label = "The p value ranges for group of proteins")
plt.title("The distribution of p values for the types")
plt.show()





fb
import matplotlib.pyplot as plt
import numpy as np

# Calculate -log10(p-value)
fb['neg_log10_pval'] = -np.log10(fb['screwed'])

# Plot base volcano
plt.figure(figsize=(10, 6))
plt.scatter(fb['logfoldchange'], fb['neg_log10_pval'], color='grey', alpha=0.7)


fc_thresh = 1
pval_thresh = 0.05

up = fb[(fb['logfoldchange'] > fc_thresh) & (fb['screwed'] < pval_thresh)]
down = fb[(fb['logfoldchange'] < fc_thresh) & (fb['screwed'] < pval_thresh)]

plt.scatter(up['logfoldchange'], up['neg_log10_pval'], color='red', label='Upregulated')
plt.scatter(down['logfoldchange'], down['neg_log10_pval'], color='blue', label='Downregulated')

# Add threshold lines
plt.axhline(-np.log10(pval_thresh), color='black', linestyle='--')
plt.axvline(fc_thresh, color='black', linestyle='--')
plt.axvline(-fc_thresh, color='black', linestyle='--')

#  Label top N significant proteins
top_proteins = fb.nsmallest(10,'screwed')
for _, row in top_proteins.iterrows():
    plt.text(row['logfoldchange'], row['neg_log10_pval'], row['protein_list'], fontsize=8)

plt.xlabel('log2(Fold Change)')
plt.ylabel('-log10(p-value)')
plt.title('Volcano Plot of Proteins')
plt.legend()
plt.tight_layout()
plt.show()

fb['pup'].max()
yu = []

try:
  for a in range(0, len(fb['valus'])):
    u =  fb["valus"][a] + 1
    yu.append(u)
except:
  print(a)
len(yu)
ab = []

for i in yu:
  ab.append((type(i)))
ab

ab = pd.Series(ab)

i = ab[0]
index01 = ab[ab!=i].index
index01



inn = fb.iloc[index01]

com = fb.drop(labels = index01)

com

com

com





gist = [1,2,3,4]
len(gist)
bhole = []

import matplotlib.pyplot as plt
import numpy as np

# Calculate -log10(p-value)
com['neg_log10_pval'] = -np.log10(com['screwed'])

# Plot base volcano
plt.figure(figsize=(10, 6))
plt.scatter(com['logfoldchange'], com['neg_log10_pval'], color='grey', alpha=0.7)


fc_thresh = 1
pval_thresh = 0.05

up = com[(com['logfoldchange'] > fc_thresh) & (com['screwed'] < pval_thresh)]
down = com[(com['logfoldchange'] < fc_thresh) & (com['screwed'] < pval_thresh)]

plt.scatter(up['logfoldchange'], up['neg_log10_pval'], color='red', label='Upregulated')
plt.scatter(down['logfoldchange'], down['neg_log10_pval'], color='blue', label='Downregulated')

# Add threshold lines
plt.axhline(-np.log10(pval_thresh), color='black', linestyle='--')
plt.axvline(fc_thresh, color='black', linestyle='--')
plt.axvline(-fc_thresh, color='black', linestyle='--')

#  Label top N significant proteins
top_proteins = com.nsmallest(10,'screwed')
for _, row in top_proteins.iterrows():
    plt.text(row['logfoldchange'], row['neg_log10_pval'], row['protein_list'], fontsize=8)

plt.xlabel('log2(Fold Change)')
plt.ylabel('-log10(p-value)')
plt.title('Volcano Plot of Proteins')
plt.legend()
plt.tight_layout()
plt.show()

kbc = (fb[fb['high:cmeans']!=0])
kbc2 = (kbc[kbc['low:cmeans']!=0])

fb = kbc2

fb

gy

tx.sum()

from scipy import stats
au = fb["screwed"]

from statsmodels.stats.multitest import multipletests
correct  = multipletests(au,alpha =0.05,method = 'fdr_bh')

reject, corrected, _, _ = correct

len(corrected)
len(corrected)

fb['corrected'] = corrected

#Now let us plot the volcano plot
fb
import matplotlib.pyplot as plt
import numpy as np

# Calculate -log10(p-value)
fb['neg_log10_pval'] = -np.log10(fb['pup'])

# Plot base volcano
plt.figure(figsize=(10, 6))
plt.scatter(fb['logfoldchange'], fb['neg_log10_pval'], color='grey', alpha=0.7)


fc_thresh = 1
pval_thresh = 0.05

up = fb[(fb['logfoldchange'] > fc_thresh) & (fb['screwed'] < pval_thresh)]
down = fb[(fb['logfoldchange'] < fc_thresh) & (fb['screwed'] < pval_thresh)]

plt.scatter(up['logfoldchange'], up['neg_log10_pval'], color='red', label='Upregulated')
plt.scatter(down['logfoldchange'], down['neg_log10_pval'], color='blue', label='Downregulated')

# Add threshold lines
plt.axhline(-np.log10(pval_thresh), color='black', linestyle='--')
plt.axvline(fc_thresh, color='black', linestyle='--')
plt.axvline(-fc_thresh, color='black', linestyle='--')

#  Label top N significant proteins
top_proteins = fb.nsmallest(10,'screwed')
for _, row in top_proteins.iterrows():
    plt.text(row['logfoldchange'], row['neg_log10_pval'], row['protein_list'], fontsize=8)

plt.xlabel('log2(Fold Change)')
plt.ylabel('-log10(p-value)')
plt.title('Volcano Plot of Proteins')
plt.legend()
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Calculate -log10(p-value)
fb['neg_log10_pval'] = -np.log10(fb['corrected'])

# Plot base volcano
plt.figure(figsize=(10, 6))
plt.scatter(fb['logfoldchange'], fb['neg_log10_pval'], color='grey', alpha=0.7)


fc_thresh = 1
pval_thresh = 0.05

up = fb[(fb['logfoldchange'] > fc_thresh) & (fb['corrected'] < pval_thresh)]
down = fb[(fb['logfoldchange'] < fc_thresh) & (fb['corrected'] < pval_thresh)]

plt.scatter(up['logfoldchange'], up['neg_log10_pval'], color='red', label='Upregulated')
plt.scatter(down['logfoldchange'], down['neg_log10_pval'], color='blue', label='Downregulated')

# Add threshold lines
plt.axhline(-np.log10(pval_thresh), color='black', linestyle='--')
plt.axvline(fc_thresh, color='black', linestyle='--')
plt.axvline(-fc_thresh, color='black', linestyle='--')

#  Label top N significant proteins
top_proteins = fb.nsmallest(10,'screwed')
for _, row in top_proteins.iterrows():
    plt.text(row['logfoldchange'], row['neg_log10_pval'], row['protein_list'], fontsize=8)

plt.xlabel('log2(Fold Change)')
plt.ylabel('-log10(p-value)')
plt.savefig('my_protein_volcano_plot.jpg',format = 'jpg', dpi = 300)
plt.title('Volcano Plot of Proteins')
plt.legend()
plt.tight_layout()
plt.show()

# volcano plot has been generrated with use of the corrected p values and the corrected p values for each type of protein ahs bee kept in corrected column of the fb dataframe

kbc = kbc[kbc['screwed']<0.05]
#What Protein are significantly diffeerent in both the cirrhossis groups
hcc = kbc.sort_values(by = 'screwed', ascending = True)[['Protein_name','screwed']]
#Proteins that are most significantly different in both the cirrhosis groups (ranked in descending order, most different first)
hcc
#Proteins that are more significant in lower cirrhosis group as compard to higher cirrhosos groups, arranged by lowest log fold change to highest
lcc1 = kbc.sort_values(by = 'logfoldchange', ascending = True)[['Protein_name', 'logfoldchange']]
lcc1
#Proteins that are more significantly higher in higher cirrhosis group as compared to lower cirrhossis groups, arranged by highest log fold change to lowest in descending order
hcc2 = kbc.sort_values(by = 'logfoldchange', ascending = False)[['Protein_name', 'logfoldchange']]
hcc2.to_excel('proteins_significant_.xlsx', index = False)
low_excelsheet_with_logfoldchange = lcc1.to_excel('lowcirrhosis.xlsx', index = False)
different_proteins_in_both_grops = hcc.to_excel('highcirrhosis.xlsx', index = False)

kbc['Protein_name'] = kbc['protein_list']

#The list of the proteins that are significantly different in both the protein groups
dd = dd.sort_values(by = 'screwed',ascending = True)

dd['p-value']= dd['screwed']
dd.drop('screwed',axis = 1, inplace = True) #Proteins that have significant difference among both cirrhossis groups in high to low order(400 of them)'

"""PROTEINS (TOP 400) THAT ARE MOST DIFFERENT BETWEEN TWO GROUPS ON THE BASIS FOR P VALUE IN DESCENDING ORDER STORED IN A DATAFRAME"""

dd



"""PROTEINS THAT ARE HIGHER IN HIGH CIRHOSSIS GROUP AS COMPARED TO LOW CIRHOSSIS GROUP ARE STORED IN DATAFRAME MENTIONING THE LOG FOLDED CHANGE DESCENDING ORDER"""

fb

high_cirhosssis = hc[['protein_list', 'logfoldchange']]

high_cirhosssis[:250].to_excel() #Proteins higher in higher cirrhossis grou (top 30) along with the log change value

low_cirhossis = kbc.sort_values(by = 'logfoldchange', ascending=True)
low_cirhossis = low_cirhossis[['protein_list','logfoldchange']]

low_cirhossis[:250].to_excel() #Those that more signifcan in lower cirrhossis than higher cirrhosis along with ou log fold change valu based

hc = kbc.sort_values(by = 'logfoldchange',ascending = False)

